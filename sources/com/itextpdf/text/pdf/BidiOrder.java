package com.itextpdf.text.pdf;

import com.dd.plist.ASCIIPropertyListParser;
import com.google.common.base.Ascii;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.languages.DevanagariLigaturizer;
import com.itextpdf.text.pdf.languages.GujaratiLigaturizer;
import kotlin.text.Typography;
import okio.Utf8;
import org.apache.commons.lang3.ClassUtils;

public final class BidiOrder {
    public static final byte A = 18;
    private static final byte[] B = new byte[65536];
    private static char[] C = {0, 8, 14, 9, 9, 16, 10, 10, 15, 11, 11, 16, 12, 12, 17, 13, 13, 15, 14, 27, 14, 28, 30, 15, 31, 31, 16, ' ', ' ', 17, '!', '\"', 18, '#', '%', 10, Typography.f29117d, '*', 18, '+', '+', 10, ASCIIPropertyListParser.f18651i, ASCIIPropertyListParser.f18651i, 12, '-', '-', 10, ClassUtils.PACKAGE_SEPARATOR_CHAR, ClassUtils.PACKAGE_SEPARATOR_CHAR, 12, '/', '/', 9, '0', '9', 8, ASCIIPropertyListParser.A, ASCIIPropertyListParser.A, 12, ASCIIPropertyListParser.f18655m, '@', 18, 'A', ASCIIPropertyListParser.D, 0, '[', '`', 18, 'a', 'z', 0, ASCIIPropertyListParser.f18652j, '~', 18, Ascii.N, 132, 14, 133, 133, 15, 134, 159, 14, Typography.f29120g, Typography.f29120g, 12, 161, 161, 18, Typography.f29122i, 165, 10, 166, Typography.f29125l, 18, 170, 170, 0, 171, 175, 18, Typography.p, Typography.q, 10, 178, 179, 8, 180, 180, 18, 181, 181, 0, Typography.r, 184, 18, 185, 185, 8, 186, 186, 0, 187, 191, 18, 192, 214, 0, Typography.f29121h, Typography.f29121h, 18, 216, 246, 0, 247, 247, 18, 248, 696, 0, 697, 698, 18, 699, 705, 0, 706, 719, 18, 720, 721, 0, 722, 735, 18, 736, 740, 0, 741, 749, 18, 750, 750, 0, 751, 767, 18, 768, 855, 13, 856, 860, 0, 861, 879, 13, 880, 883, 0, 884, 885, 18, 886, 893, 0, 894, 894, 18, 895, 899, 0, 900, 901, 18, 902, 902, 0, 903, 903, 18, 904, 1013, 0, 1014, 1014, 18, 1015, 1154, 0, 1155, 1158, 13, 1159, 1159, 0, 1160, 1161, 13, 1162, 1417, 0, 1418, 1418, 18, 1419, 1424, 0, 1425, 1441, 13, 1442, 1442, 0, 1443, 1465, 13, 1466, 1466, 0, 1467, 1469, 13, 1470, 1470, 3, 1471, 1471, 13, 1472, 1472, 3, 1473, 1474, 13, 1475, 1475, 3, 1476, 1476, 13, 1477, 1487, 0, 1488, 1514, 3, 1515, 1519, 0, 1520, 1524, 3, 1525, 1535, 0, 1536, 1539, 4, 1540, 1547, 0, 1548, 1548, 12, 1549, 1549, 4, 1550, 1551, 18, 1552, 1557, 13, 1558, 1562, 0, 1563, 1563, 4, 1564, 1566, 0, 1567, 1567, 4, 1568, 1568, 0, 1569, 1594, 4, 1595, 1599, 0, 1600, 1610, 4, 1611, 1624, 13, 1625, 1631, 0, 1632, 1641, 11, 1642, 1642, 10, 1643, 1644, 11, 1645, 1647, 4, 1648, 1648, 13, 1649, 1749, 4, 1750, 1756, 13, 1757, 1757, 4, 1758, 1764, 13, 1765, 1766, 4, 1767, 1768, 13, 1769, 1769, 18, 1770, 1773, 13, 1774, 1775, 4, 1776, 1785, 8, 1786, 1805, 4, 1806, 1806, 0, 1807, 1807, 14, 1808, 1808, 4, 1809, 1809, 13, 1810, 1839, 4, 1840, 1866, 13, 1867, 1868, 0, 1869, 1871, 4, 1872, 1919, 0, 1920, 1957, 4, 1958, 1968, 13, 1969, 1969, 4, 1970, 2304, 0, 2305, 2306, 13, 2307, 2363, 0, 2364, 2364, 13, 2365, 2368, 0, 2369, DevanagariLigaturizer.p, 13, 2377, 2380, 0, DevanagariLigaturizer.w, DevanagariLigaturizer.w, 13, 2382, 2384, 0, 2385, 2388, 13, 2389, 2401, 0, DevanagariLigaturizer.q, DevanagariLigaturizer.r, 13, 2404, 2432, 0, 2433, 2433, 13, 2434, 2491, 0, 2492, 2492, 13, 2493, 2496, 0, 2497, 2500, 13, 2501, 2508, 0, 2509, 2509, 13, 2510, 2529, 0, 2530, 2531, 13, 2532, 2545, 0, 2546, 2547, 10, 2548, 2560, 0, 2561, 2562, 13, 2563, 2619, 0, 2620, 2620, 13, 2621, 2624, 0, 2625, 2626, 13, 2627, 2630, 0, 2631, 2632, 13, 2633, 2634, 0, 2635, 2637, 13, 2638, 2671, 0, 2672, 2673, 13, 2674, 2688, 0, 2689, 2690, 13, 2691, 2747, 0, 2748, 2748, 13, 2749, 2752, 0, 2753, 2757, 13, 2758, 2758, 0, GujaratiLigaturizer.o, GujaratiLigaturizer.p, 13, 2761, 2764, 0, GujaratiLigaturizer.w, GujaratiLigaturizer.w, 13, 2766, 2785, 0, GujaratiLigaturizer.q, GujaratiLigaturizer.r, 13, 2788, 2800, 0, 2801, 2801, 10, 2802, 2816, 0, 2817, 2817, 13, 2818, 2875, 0, 2876, 2876, 13, 2877, 2878, 0, 2879, 2879, 13, 2880, 2880, 0, 2881, 2883, 13, 2884, 2892, 0, 2893, 2893, 13, 2894, 2901, 0, 2902, 2902, 13, 2903, 2945, 0, 2946, 2946, 13, 2947, 3007, 0, 3008, 3008, 13, 3009, 3020, 0, 3021, 3021, 13, 3022, 3058, 0, 3059, 3064, 18, 3065, 3065, 10, 3066, 3066, 18, 3067, 3133, 0, 3134, 3136, 13, 3137, 3141, 0, 3142, 3144, 13, 3145, 3145, 0, 3146, 3149, 13, 3150, 3156, 0, 3157, 3158, 13, 3159, 3259, 0, 3260, 3260, 13, 3261, 3275, 0, 3276, 3277, 13, 3278, 3392, 0, 3393, 3395, 13, 3396, 3404, 0, 3405, 3405, 13, 3406, 3529, 0, 3530, 3530, 13, 3531, 3537, 0, 3538, 3540, 13, 3541, 3541, 0, 3542, 3542, 13, 3543, 3632, 0, 3633, 3633, 13, 3634, 3635, 0, 3636, 3642, 13, 3643, 3646, 0, 3647, 3647, 10, 3648, 3654, 0, 3655, 3662, 13, 3663, 3760, 0, 3761, 3761, 13, 3762, 3763, 0, 3764, 3769, 13, 3770, 3770, 0, 3771, 3772, 13, 3773, 3783, 0, 3784, 3789, 13, 3790, 3863, 0, 3864, 3865, 13, 3866, 3892, 0, 3893, 3893, 13, 3894, 3894, 0, 3895, 3895, 13, 3896, 3896, 0, 3897, 3897, 13, 3898, 3901, 18, 3902, 3952, 0, 3953, 3966, 13, 3967, 3967, 0, 3968, 3972, 13, 3973, 3973, 0, 3974, 3975, 13, 3976, 3983, 0, 3984, 3991, 13, 3992, 3992, 0, 3993, 4028, 13, 4029, 4037, 0, 4038, 4038, 13, 4039, 4140, 0, 4141, 4144, 13, 4145, 4145, 0, 4146, 4146, 13, 4147, 4149, 0, 4150, 4151, 13, 4152, 4152, 0, 4153, 4153, 13, 4154, 4183, 0, 4184, 4185, 13, 4186, 5759, 0, 5760, 5760, 17, 5761, 5786, 0, 5787, 5788, 18, 5789, 5905, 0, 5906, 5908, 13, 5909, 5937, 0, 5938, 5940, 13, 5941, 5969, 0, 5970, 5971, 13, 5972, 6001, 0, 6002, 6003, 13, 6004, 6070, 0, 6071, 6077, 13, 6078, 6085, 0, 6086, 6086, 13, 6087, 6088, 0, 6089, 6099, 13, 6100, 6106, 0, 6107, 6107, 10, 6108, 6108, 0, 6109, 6109, 13, 6110, 6127, 0, 6128, 6137, 18, 6138, 6143, 0, 6144, 6154, 18, 6155, 6157, 13, 6158, 6158, 17, 6159, 6312, 0, 6313, 6313, 13, 6314, 6431, 0, 6432, 6434, 13, 6435, 6438, 0, 6439, 6443, 13, 6444, 6449, 0, 6450, 6450, 13, 6451, 6456, 0, 6457, 6459, 13, 6460, 6463, 0, 6464, 6464, 18, 6465, 6467, 0, 6468, 6469, 18, 6470, 6623, 0, 6624, 6655, 18, 6656, 8124, 0, 8125, 8125, 18, 8126, 8126, 0, 8127, 8129, 18, 8130, 8140, 0, 8141, 8143, 18, 8144, 8156, 0, 8157, 8159, 18, 8160, 8172, 0, 8173, 8175, 18, 8176, 8188, 0, 8189, 8190, 18, 8191, 8191, 0, 8192, 8202, 17, 8203, 8205, 14, 8206, 8206, 0, 8207, 8207, 3, 8208, 8231, 18, 8232, 8232, 17, BaseFont.s4, BaseFont.s4, 15, 8234, 8234, 1, 8235, 8235, 5, 8236, 8236, 7, 8237, 8237, 2, 8238, 8238, 6, 8239, 8239, 17, 8240, 8244, 10, 8245, 8276, 18, 8277, 8278, 0, 8279, 8279, 18, 8280, 8286, 0, 8287, 8287, 17, 8288, 8291, 14, 8292, 8297, 0, 8298, 8303, 14, 8304, 8304, 8, 8305, 8307, 0, 8308, 8313, 8, 8314, 8315, 10, 8316, 8318, 18, 8319, 8319, 0, 8320, 8329, 8, 8330, 8331, 10, 8332, 8334, 18, 8335, 8351, 0, 8352, 8369, 10, 8370, 8399, 0, 8400, 8426, 13, 8427, 8447, 0, 8448, 8449, 18, 8450, 8450, 0, 8451, 8454, 18, 8455, 8455, 0, 8456, 8457, 18, 8458, 8467, 0, 8468, 8468, 18, 8469, 8469, 0, 8470, 8472, 18, 8473, 8477, 0, 8478, 8483, 18, 8484, 8484, 0, 8485, 8485, 18, 8486, 8486, 0, 8487, 8487, 18, 8488, 8488, 0, 8489, 8489, 18, 8490, 8493, 0, 8494, 8494, 10, 8495, 8497, 0, 8498, 8498, 18, 8499, 8505, 0, 8506, 8507, 18, 8508, 8511, 0, 8512, 8516, 18, 8517, 8521, 0, 8522, 8523, 18, 8524, 8530, 0, 8531, 8543, 18, 8544, 8591, 0, 8592, 8721, 18, 8722, 8723, 10, 8724, 9013, 18, 9014, 9082, 0, 9083, 9108, 18, 9109, 9109, 0, 9110, 9168, 18, 9169, 9215, 0, 9216, 9254, 18, 9255, 9279, 0, 9280, 9290, 18, 9291, 9311, 0, 9312, 9371, 8, 9372, 9449, 0, 9450, 9450, 8, 9451, 9751, 18, 9752, 9752, 0, 9753, 9853, 18, 9854, 9855, 0, 9856, 9873, 18, 9874, 9887, 0, 9888, 9889, 18, 9890, 9984, 0, 9985, 9988, 18, 9989, 9989, 0, 9990, 9993, 18, 9994, 9995, 0, 9996, 10023, 18, 10024, 10024, 0, 10025, 10059, 18, 10060, 10060, 0, 10061, 10061, 18, 10062, 10062, 0, 10063, 10066, 18, 10067, 10069, 0, 10070, 10070, 18, 10071, 10071, 0, 10072, 10078, 18, 10079, 10080, 0, 10081, 10132, 18, 10133, 10135, 0, 10136, 10159, 18, 10160, 10160, 0, 10161, 10174, 18, 10175, 10191, 0, 10192, 10219, 18, 10220, 10223, 0, 10224, 11021, 18, 11022, 11903, 0, 11904, 11929, 18, 11930, 11930, 0, 11931, 12019, 18, 12020, 12031, 0, 12032, 12245, 18, 12246, 12271, 0, 12272, 12283, 18, 12284, 12287, 0, 12288, 12288, 17, 12289, 12292, 18, 12293, 12295, 0, 12296, 12320, 18, 12321, 12329, 0, 12330, 12335, 13, 12336, 12336, 18, 12337, 12341, 0, 12342, 12343, 18, 12344, 12348, 0, 12349, 12351, 18, 12352, 12440, 0, 12441, 12442, 13, 12443, 12444, 18, 12445, 12447, 0, 12448, 12448, 18, 12449, 12538, 0, 12539, 12539, 18, 12540, 12828, 0, 12829, 12830, 18, 12831, 12879, 0, 12880, 12895, 18, 12896, 12923, 0, 12924, 12925, 18, 12926, 12976, 0, 12977, 12991, 18, 12992, 13003, 0, 13004, 13007, 18, 13008, 13174, 0, 13175, 13178, 18, 13179, 13277, 0, 13278, 13279, 18, 13280, 13310, 0, 13311, 13311, 18, 13312, 19903, 0, 19904, 19967, 18, 19968, 42127, 0, 42128, 42182, 18, 42183, 64284, 0, 64285, 64285, 3, 64286, 64286, 13, 64287, 64296, 3, 64297, 64297, 10, 64298, 64310, 3, 64311, 64311, 0, 64312, 64316, 3, 64317, 64317, 0, 64318, 64318, 3, 64319, 64319, 0, 64320, 64321, 3, 64322, 64322, 0, 64323, 64324, 3, 64325, 64325, 0, 64326, 64335, 3, 64336, 64433, 4, 64434, 64466, 0, 64467, 64829, 4, 64830, 64831, 18, 64832, 64847, 0, 64848, 64911, 4, 64912, 64913, 0, 64914, 64967, 4, 64968, 65007, 0, 65008, 65020, 4, 65021, 65021, 18, 65022, 65023, 0, 65024, 65039, 13, 65040, 65055, 0, 65056, 65059, 13, 65060, 65071, 0, 65072, 65103, 18, 65104, 65104, 12, 65105, 65105, 18, 65106, 65106, 12, 65107, 65107, 0, 65108, 65108, 18, 65109, 65109, 12, 65110, 65118, 18, 65119, 65119, 10, 65120, 65121, 18, 65122, 65123, 10, 65124, 65126, 18, 65127, 65127, 0, 65128, 65128, 18, 65129, 65130, 10, 65131, 65131, 18, 65132, 65135, 0, 65136, 65140, 4, 65141, 65141, 0, 65142, 65276, 4, 65277, 65278, 0, 65279, 65279, 14, 65280, 65280, 0, 65281, 65282, 18, 65283, 65285, 10, 65286, 65290, 18, 65291, 65291, 10, 65292, 65292, 12, 65293, 65293, 10, 65294, 65294, 12, 65295, 65295, 9, 65296, 65305, 8, 65306, 65306, 12, 65307, 65312, 18, 65313, 65338, 0, 65339, 65344, 18, 65345, 65370, 0, 65371, 65381, 18, 65382, 65503, 0, 65504, 65505, 10, 65506, 65508, 18, 65509, 65510, 10, 65511, 65511, 0, 65512, 65518, 18, 65519, 65528, 0, 65529, 65531, 14, 65532, 65533, 18, 65534, 65535, 0};

    /* renamed from: g  reason: collision with root package name */
    public static final byte f25952g = 0;

    /* renamed from: h  reason: collision with root package name */
    public static final byte f25953h = 1;

    /* renamed from: i  reason: collision with root package name */
    public static final byte f25954i = 2;

    /* renamed from: j  reason: collision with root package name */
    public static final byte f25955j = 3;

    /* renamed from: k  reason: collision with root package name */
    public static final byte f25956k = 4;

    /* renamed from: l  reason: collision with root package name */
    public static final byte f25957l = 5;

    /* renamed from: m  reason: collision with root package name */
    public static final byte f25958m = 6;

    /* renamed from: n  reason: collision with root package name */
    public static final byte f25959n = 7;
    public static final byte o = 8;
    public static final byte p = 9;
    public static final byte q = 10;
    public static final byte r = 11;
    public static final byte s = 12;
    public static final byte t = 13;
    public static final byte u = 14;
    public static final byte v = 15;
    public static final byte w = 16;
    public static final byte x = 17;
    public static final byte y = 18;
    public static final byte z = 0;

    /* renamed from: a  reason: collision with root package name */
    private byte[] f25960a;

    /* renamed from: b  reason: collision with root package name */
    private byte[] f25961b;

    /* renamed from: c  reason: collision with root package name */
    private byte f25962c = -1;

    /* renamed from: d  reason: collision with root package name */
    private int f25963d;

    /* renamed from: e  reason: collision with root package name */
    private byte[] f25964e;

    /* renamed from: f  reason: collision with root package name */
    private byte[] f25965f;

    /* JADX WARNING: type inference failed for: r5v0, types: [int] */
    /* JADX WARNING: Multi-variable type inference failed */
    static {
        /*
            r0 = 65536(0x10000, float:9.18355E-41)
            byte[] r0 = new byte[r0]
            B = r0
            r0 = 0
            r1 = 1725(0x6bd, float:2.417E-42)
            char[] r1 = new char[r1]
            r1 = {0, 8, 14, 9, 9, 16, 10, 10, 15, 11, 11, 16, 12, 12, 17, 13, 13, 15, 14, 27, 14, 28, 30, 15, 31, 31, 16, 32, 32, 17, 33, 34, 18, 35, 37, 10, 38, 42, 18, 43, 43, 10, 44, 44, 12, 45, 45, 10, 46, 46, 12, 47, 47, 9, 48, 57, 8, 58, 58, 12, 59, 64, 18, 65, 90, 0, 91, 96, 18, 97, 122, 0, 123, 126, 18, 127, 132, 14, 133, 133, 15, 134, 159, 14, 160, 160, 12, 161, 161, 18, 162, 165, 10, 166, 169, 18, 170, 170, 0, 171, 175, 18, 176, 177, 10, 178, 179, 8, 180, 180, 18, 181, 181, 0, 182, 184, 18, 185, 185, 8, 186, 186, 0, 187, 191, 18, 192, 214, 0, 215, 215, 18, 216, 246, 0, 247, 247, 18, 248, 696, 0, 697, 698, 18, 699, 705, 0, 706, 719, 18, 720, 721, 0, 722, 735, 18, 736, 740, 0, 741, 749, 18, 750, 750, 0, 751, 767, 18, 768, 855, 13, 856, 860, 0, 861, 879, 13, 880, 883, 0, 884, 885, 18, 886, 893, 0, 894, 894, 18, 895, 899, 0, 900, 901, 18, 902, 902, 0, 903, 903, 18, 904, 1013, 0, 1014, 1014, 18, 1015, 1154, 0, 1155, 1158, 13, 1159, 1159, 0, 1160, 1161, 13, 1162, 1417, 0, 1418, 1418, 18, 1419, 1424, 0, 1425, 1441, 13, 1442, 1442, 0, 1443, 1465, 13, 1466, 1466, 0, 1467, 1469, 13, 1470, 1470, 3, 1471, 1471, 13, 1472, 1472, 3, 1473, 1474, 13, 1475, 1475, 3, 1476, 1476, 13, 1477, 1487, 0, 1488, 1514, 3, 1515, 1519, 0, 1520, 1524, 3, 1525, 1535, 0, 1536, 1539, 4, 1540, 1547, 0, 1548, 1548, 12, 1549, 1549, 4, 1550, 1551, 18, 1552, 1557, 13, 1558, 1562, 0, 1563, 1563, 4, 1564, 1566, 0, 1567, 1567, 4, 1568, 1568, 0, 1569, 1594, 4, 1595, 1599, 0, 1600, 1610, 4, 1611, 1624, 13, 1625, 1631, 0, 1632, 1641, 11, 1642, 1642, 10, 1643, 1644, 11, 1645, 1647, 4, 1648, 1648, 13, 1649, 1749, 4, 1750, 1756, 13, 1757, 1757, 4, 1758, 1764, 13, 1765, 1766, 4, 1767, 1768, 13, 1769, 1769, 18, 1770, 1773, 13, 1774, 1775, 4, 1776, 1785, 8, 1786, 1805, 4, 1806, 1806, 0, 1807, 1807, 14, 1808, 1808, 4, 1809, 1809, 13, 1810, 1839, 4, 1840, 1866, 13, 1867, 1868, 0, 1869, 1871, 4, 1872, 1919, 0, 1920, 1957, 4, 1958, 1968, 13, 1969, 1969, 4, 1970, 2304, 0, 2305, 2306, 13, 2307, 2363, 0, 2364, 2364, 13, 2365, 2368, 0, 2369, 2376, 13, 2377, 2380, 0, 2381, 2381, 13, 2382, 2384, 0, 2385, 2388, 13, 2389, 2401, 0, 2402, 2403, 13, 2404, 2432, 0, 2433, 2433, 13, 2434, 2491, 0, 2492, 2492, 13, 2493, 2496, 0, 2497, 2500, 13, 2501, 2508, 0, 2509, 2509, 13, 2510, 2529, 0, 2530, 2531, 13, 2532, 2545, 0, 2546, 2547, 10, 2548, 2560, 0, 2561, 2562, 13, 2563, 2619, 0, 2620, 2620, 13, 2621, 2624, 0, 2625, 2626, 13, 2627, 2630, 0, 2631, 2632, 13, 2633, 2634, 0, 2635, 2637, 13, 2638, 2671, 0, 2672, 2673, 13, 2674, 2688, 0, 2689, 2690, 13, 2691, 2747, 0, 2748, 2748, 13, 2749, 2752, 0, 2753, 2757, 13, 2758, 2758, 0, 2759, 2760, 13, 2761, 2764, 0, 2765, 2765, 13, 2766, 2785, 0, 2786, 2787, 13, 2788, 2800, 0, 2801, 2801, 10, 2802, 2816, 0, 2817, 2817, 13, 2818, 2875, 0, 2876, 2876, 13, 2877, 2878, 0, 2879, 2879, 13, 2880, 2880, 0, 2881, 2883, 13, 2884, 2892, 0, 2893, 2893, 13, 2894, 2901, 0, 2902, 2902, 13, 2903, 2945, 0, 2946, 2946, 13, 2947, 3007, 0, 3008, 3008, 13, 3009, 3020, 0, 3021, 3021, 13, 3022, 3058, 0, 3059, 3064, 18, 3065, 3065, 10, 3066, 3066, 18, 3067, 3133, 0, 3134, 3136, 13, 3137, 3141, 0, 3142, 3144, 13, 3145, 3145, 0, 3146, 3149, 13, 3150, 3156, 0, 3157, 3158, 13, 3159, 3259, 0, 3260, 3260, 13, 3261, 3275, 0, 3276, 3277, 13, 3278, 3392, 0, 3393, 3395, 13, 3396, 3404, 0, 3405, 3405, 13, 3406, 3529, 0, 3530, 3530, 13, 3531, 3537, 0, 3538, 3540, 13, 3541, 3541, 0, 3542, 3542, 13, 3543, 3632, 0, 3633, 3633, 13, 3634, 3635, 0, 3636, 3642, 13, 3643, 3646, 0, 3647, 3647, 10, 3648, 3654, 0, 3655, 3662, 13, 3663, 3760, 0, 3761, 3761, 13, 3762, 3763, 0, 3764, 3769, 13, 3770, 3770, 0, 3771, 3772, 13, 3773, 3783, 0, 3784, 3789, 13, 3790, 3863, 0, 3864, 3865, 13, 3866, 3892, 0, 3893, 3893, 13, 3894, 3894, 0, 3895, 3895, 13, 3896, 3896, 0, 3897, 3897, 13, 3898, 3901, 18, 3902, 3952, 0, 3953, 3966, 13, 3967, 3967, 0, 3968, 3972, 13, 3973, 3973, 0, 3974, 3975, 13, 3976, 3983, 0, 3984, 3991, 13, 3992, 3992, 0, 3993, 4028, 13, 4029, 4037, 0, 4038, 4038, 13, 4039, 4140, 0, 4141, 4144, 13, 4145, 4145, 0, 4146, 4146, 13, 4147, 4149, 0, 4150, 4151, 13, 4152, 4152, 0, 4153, 4153, 13, 4154, 4183, 0, 4184, 4185, 13, 4186, 5759, 0, 5760, 5760, 17, 5761, 5786, 0, 5787, 5788, 18, 5789, 5905, 0, 5906, 5908, 13, 5909, 5937, 0, 5938, 5940, 13, 5941, 5969, 0, 5970, 5971, 13, 5972, 6001, 0, 6002, 6003, 13, 6004, 6070, 0, 6071, 6077, 13, 6078, 6085, 0, 6086, 6086, 13, 6087, 6088, 0, 6089, 6099, 13, 6100, 6106, 0, 6107, 6107, 10, 6108, 6108, 0, 6109, 6109, 13, 6110, 6127, 0, 6128, 6137, 18, 6138, 6143, 0, 6144, 6154, 18, 6155, 6157, 13, 6158, 6158, 17, 6159, 6312, 0, 6313, 6313, 13, 6314, 6431, 0, 6432, 6434, 13, 6435, 6438, 0, 6439, 6443, 13, 6444, 6449, 0, 6450, 6450, 13, 6451, 6456, 0, 6457, 6459, 13, 6460, 6463, 0, 6464, 6464, 18, 6465, 6467, 0, 6468, 6469, 18, 6470, 6623, 0, 6624, 6655, 18, 6656, 8124, 0, 8125, 8125, 18, 8126, 8126, 0, 8127, 8129, 18, 8130, 8140, 0, 8141, 8143, 18, 8144, 8156, 0, 8157, 8159, 18, 8160, 8172, 0, 8173, 8175, 18, 8176, 8188, 0, 8189, 8190, 18, 8191, 8191, 0, 8192, 8202, 17, 8203, 8205, 14, 8206, 8206, 0, 8207, 8207, 3, 8208, 8231, 18, 8232, 8232, 17, 8233, 8233, 15, 8234, 8234, 1, 8235, 8235, 5, 8236, 8236, 7, 8237, 8237, 2, 8238, 8238, 6, 8239, 8239, 17, 8240, 8244, 10, 8245, 8276, 18, 8277, 8278, 0, 8279, 8279, 18, 8280, 8286, 0, 8287, 8287, 17, 8288, 8291, 14, 8292, 8297, 0, 8298, 8303, 14, 8304, 8304, 8, 8305, 8307, 0, 8308, 8313, 8, 8314, 8315, 10, 8316, 8318, 18, 8319, 8319, 0, 8320, 8329, 8, 8330, 8331, 10, 8332, 8334, 18, 8335, 8351, 0, 8352, 8369, 10, 8370, 8399, 0, 8400, 8426, 13, 8427, 8447, 0, 8448, 8449, 18, 8450, 8450, 0, 8451, 8454, 18, 8455, 8455, 0, 8456, 8457, 18, 8458, 8467, 0, 8468, 8468, 18, 8469, 8469, 0, 8470, 8472, 18, 8473, 8477, 0, 8478, 8483, 18, 8484, 8484, 0, 8485, 8485, 18, 8486, 8486, 0, 8487, 8487, 18, 8488, 8488, 0, 8489, 8489, 18, 8490, 8493, 0, 8494, 8494, 10, 8495, 8497, 0, 8498, 8498, 18, 8499, 8505, 0, 8506, 8507, 18, 8508, 8511, 0, 8512, 8516, 18, 8517, 8521, 0, 8522, 8523, 18, 8524, 8530, 0, 8531, 8543, 18, 8544, 8591, 0, 8592, 8721, 18, 8722, 8723, 10, 8724, 9013, 18, 9014, 9082, 0, 9083, 9108, 18, 9109, 9109, 0, 9110, 9168, 18, 9169, 9215, 0, 9216, 9254, 18, 9255, 9279, 0, 9280, 9290, 18, 9291, 9311, 0, 9312, 9371, 8, 9372, 9449, 0, 9450, 9450, 8, 9451, 9751, 18, 9752, 9752, 0, 9753, 9853, 18, 9854, 9855, 0, 9856, 9873, 18, 9874, 9887, 0, 9888, 9889, 18, 9890, 9984, 0, 9985, 9988, 18, 9989, 9989, 0, 9990, 9993, 18, 9994, 9995, 0, 9996, 10023, 18, 10024, 10024, 0, 10025, 10059, 18, 10060, 10060, 0, 10061, 10061, 18, 10062, 10062, 0, 10063, 10066, 18, 10067, 10069, 0, 10070, 10070, 18, 10071, 10071, 0, 10072, 10078, 18, 10079, 10080, 0, 10081, 10132, 18, 10133, 10135, 0, 10136, 10159, 18, 10160, 10160, 0, 10161, 10174, 18, 10175, 10191, 0, 10192, 10219, 18, 10220, 10223, 0, 10224, 11021, 18, 11022, 11903, 0, 11904, 11929, 18, 11930, 11930, 0, 11931, 12019, 18, 12020, 12031, 0, 12032, 12245, 18, 12246, 12271, 0, 12272, 12283, 18, 12284, 12287, 0, 12288, 12288, 17, 12289, 12292, 18, 12293, 12295, 0, 12296, 12320, 18, 12321, 12329, 0, 12330, 12335, 13, 12336, 12336, 18, 12337, 12341, 0, 12342, 12343, 18, 12344, 12348, 0, 12349, 12351, 18, 12352, 12440, 0, 12441, 12442, 13, 12443, 12444, 18, 12445, 12447, 0, 12448, 12448, 18, 12449, 12538, 0, 12539, 12539, 18, 12540, 12828, 0, 12829, 12830, 18, 12831, 12879, 0, 12880, 12895, 18, 12896, 12923, 0, 12924, 12925, 18, 12926, 12976, 0, 12977, 12991, 18, 12992, 13003, 0, 13004, 13007, 18, 13008, 13174, 0, 13175, 13178, 18, 13179, 13277, 0, 13278, 13279, 18, 13280, 13310, 0, 13311, 13311, 18, 13312, 19903, 0, 19904, 19967, 18, 19968, -23409, 0, -23408, -23354, 18, -23353, -1252, 0, -1251, -1251, 3, -1250, -1250, 13, -1249, -1240, 3, -1239, -1239, 10, -1238, -1226, 3, -1225, -1225, 0, -1224, -1220, 3, -1219, -1219, 0, -1218, -1218, 3, -1217, -1217, 0, -1216, -1215, 3, -1214, -1214, 0, -1213, -1212, 3, -1211, -1211, 0, -1210, -1201, 3, -1200, -1103, 4, -1102, -1070, 0, -1069, -707, 4, -706, -705, 18, -704, -689, 0, -688, -625, 4, -624, -623, 0, -622, -569, 4, -568, -529, 0, -528, -516, 4, -515, -515, 18, -514, -513, 0, -512, -497, 13, -496, -481, 0, -480, -477, 13, -476, -465, 0, -464, -433, 18, -432, -432, 12, -431, -431, 18, -430, -430, 12, -429, -429, 0, -428, -428, 18, -427, -427, 12, -426, -418, 18, -417, -417, 10, -416, -415, 18, -414, -413, 10, -412, -410, 18, -409, -409, 0, -408, -408, 18, -407, -406, 10, -405, -405, 18, -404, -401, 0, -400, -396, 4, -395, -395, 0, -394, -260, 4, -259, -258, 0, -257, -257, 14, -256, -256, 0, -255, -254, 18, -253, -251, 10, -250, -246, 18, -245, -245, 10, -244, -244, 12, -243, -243, 10, -242, -242, 12, -241, -241, 9, -240, -231, 8, -230, -230, 12, -229, -224, 18, -223, -198, 0, -197, -192, 18, -191, -166, 0, -165, -155, 18, -154, -33, 0, -32, -31, 10, -30, -28, 18, -27, -26, 10, -25, -25, 0, -24, -18, 18, -17, -8, 0, -7, -5, 14, -4, -3, 18, -2, -1, 0} // fill-array
            C = r1
        L_0x0010:
            char[] r1 = C
            int r2 = r1.length
            if (r0 >= r2) goto L_0x002d
            char r2 = r1[r0]
            int r3 = r0 + 1
            char r3 = r1[r3]
            int r4 = r0 + 2
            char r1 = r1[r4]
            byte r1 = (byte) r1
        L_0x0020:
            if (r2 > r3) goto L_0x002a
            byte[] r4 = B
            int r5 = r2 + 1
            r4[r2] = r1
            r2 = r5
            goto L_0x0020
        L_0x002a:
            int r0 = r0 + 3
            goto L_0x0010
        L_0x002d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.itextpdf.text.pdf.BidiOrder.<clinit>():void");
    }

    public BidiOrder(byte[] bArr) {
        y(bArr);
        this.f25960a = (byte[]) bArr.clone();
        s();
    }

    private static int[] a(byte[] bArr, int[] iArr) {
        int[] iArr2 = new int[bArr.length];
        int i2 = 0;
        int i3 = 0;
        while (i2 < iArr.length) {
            int i4 = iArr[i2];
            int i5 = i4 - i3;
            byte[] bArr2 = new byte[i5];
            System.arraycopy(bArr, i3, bArr2, 0, i5);
            int[] b2 = b(bArr2);
            for (int i6 = 0; i6 < b2.length; i6++) {
                iArr2[i3 + i6] = b2[i6] + i3;
            }
            i2++;
            i3 = i4;
        }
        return iArr2;
    }

    private static int[] b(byte[] bArr) {
        int[] iArr = new int[r0];
        for (int i2 = 0; i2 < r0; i2++) {
            iArr[i2] = i2;
        }
        byte b2 = Utf8.f31404a;
        int i3 = 0;
        for (byte b3 : bArr) {
            if (b3 > i3) {
                i3 = b3;
            }
            if ((b3 & 1) != 0 && b3 < b2) {
                b2 = b3;
            }
        }
        while (i3 >= b2) {
            int i4 = 0;
            while (i4 < r0) {
                if (bArr[i4] >= i3) {
                    int i5 = i4 + 1;
                    while (i5 < r0 && bArr[i5] >= i3) {
                        i5++;
                    }
                    for (int i6 = i5 - 1; i4 < i6; i6--) {
                        int i7 = iArr[i4];
                        iArr[i4] = iArr[i6];
                        iArr[i6] = i7;
                        i4++;
                    }
                    i4 = i5;
                }
                i4++;
            }
            i3--;
        }
        return iArr;
    }

    private void c() {
        this.f25961b = m(this.f25964e, this.f25962c);
        for (int i2 = 0; i2 < this.f25963d; i2++) {
            byte b2 = this.f25961b[i2];
            if ((b2 & 128) != 0) {
                b2 = (byte) (b2 & Byte.MAX_VALUE);
                this.f25964e[i2] = v(b2);
            }
            this.f25965f[i2] = b2;
        }
    }

    private void d() {
        byte b2;
        byte b3 = 0;
        int i2 = 0;
        while (true) {
            if (i2 >= this.f25963d) {
                b2 = -1;
                break;
            }
            b2 = this.f25964e[i2];
            if (b2 == 0 || b2 == 4 || b2 == 3) {
                break;
            }
            i2++;
        }
        if (!(b2 == -1 || b2 == 0)) {
            b3 = 1;
        }
        this.f25962c = b3;
    }

    private int e(int i2, int i3, byte[] bArr) {
        int i4 = i2 - 1;
        while (true) {
            i4++;
            if (i4 >= i3) {
                return i3;
            }
            byte b2 = this.f25964e[i4];
            int i5 = 0;
            while (true) {
                if (i5 >= bArr.length) {
                    return i4;
                }
                if (b2 != bArr[i5]) {
                    i5++;
                }
            }
        }
    }

    private int f(int i2, byte[] bArr) {
        while (true) {
            int i3 = i2 - 1;
            int i4 = 0;
            if (i3 < 0) {
                return 0;
            }
            byte b2 = this.f25964e[i3];
            while (i4 < bArr.length) {
                if (b2 == bArr[i4]) {
                    i2 = i3;
                } else {
                    i4++;
                }
            }
            return i2;
        }
    }

    public static final byte h(char c2) {
        return B[c2];
    }

    private static boolean l(byte b2) {
        return b2 == 1 || b2 == 2 || b2 == 5 || b2 == 6 || b2 == 7 || b2 == 14 || b2 == 17;
    }

    private static byte[] m(byte[] bArr, byte b2) {
        byte[] bArr2 = bArr;
        int length = bArr2.length;
        byte[] bArr3 = new byte[length];
        byte[] bArr4 = new byte[62];
        byte b3 = b2;
        byte b4 = b3;
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;
        for (int i5 = 0; i5 < length; i5++) {
            bArr3[i5] = b3;
            byte b5 = bArr2[i5];
            if (b5 == 1 || b5 == 2 || b5 == 5 || b5 == 6) {
                if (i2 == 0) {
                    byte b6 = (byte) ((b5 == 5 || b5 == 6) ? 1 | (b4 + 1) : (b4 + 2) & -2);
                    if (b6 < 62) {
                        bArr4[i4] = b3;
                        i4++;
                        b3 = (b5 == 2 || b5 == 6) ? (byte) (b6 | 128) : b6;
                        bArr3[i5] = b3;
                        b4 = b6;
                    } else if (b4 == 60) {
                        i3++;
                    }
                }
                i2++;
            } else if (b5 != 7) {
                if (b5 == 15) {
                    bArr3[i5] = b2;
                    b3 = b2;
                    b4 = b3;
                    i2 = 0;
                    i3 = 0;
                    i4 = 0;
                }
            } else if (i2 > 0) {
                i2--;
            } else if (i3 > 0 && b4 != 61) {
                i3--;
            } else if (i4 > 0) {
                i4--;
                b3 = bArr4[i4];
                b4 = (byte) (b3 & Byte.MAX_VALUE);
            }
        }
        return bArr3;
    }

    private int n(int i2) {
        int i3;
        int length = this.f25960a.length;
        while (true) {
            length--;
            i3 = 1;
            if (length < 0) {
                break;
            }
            byte b2 = this.f25960a[length];
            if (b2 == 1 || b2 == 5 || b2 == 2 || b2 == 6 || b2 == 7 || b2 == 14) {
                this.f25961b[length] = 0;
                this.f25964e[length] = b2;
                this.f25965f[length] = -1;
            } else {
                i2--;
                byte[] bArr = this.f25961b;
                bArr[length] = bArr[i2];
                byte[] bArr2 = this.f25964e;
                bArr2[length] = bArr2[i2];
                byte[] bArr3 = this.f25965f;
                bArr3[length] = bArr3[i2];
            }
        }
        byte[] bArr4 = this.f25965f;
        if (bArr4[0] == -1) {
            bArr4[0] = this.f25962c;
        }
        while (true) {
            byte[] bArr5 = this.f25960a;
            if (i3 >= bArr5.length) {
                return bArr5.length;
            }
            byte[] bArr6 = this.f25965f;
            if (bArr6[i3] == -1) {
                bArr6[i3] = bArr6[i3 - 1];
            }
            i3++;
        }
    }

    private int o() {
        int i2 = 0;
        for (int i3 = 0; i3 < this.f25963d; i3++) {
            byte b2 = this.f25960a[i3];
            if (!(b2 == 1 || b2 == 5 || b2 == 2 || b2 == 6 || b2 == 7 || b2 == 14)) {
                byte[] bArr = this.f25961b;
                bArr[i2] = bArr[i3];
                byte[] bArr2 = this.f25964e;
                bArr2[i2] = bArr2[i3];
                byte[] bArr3 = this.f25965f;
                bArr3[i2] = bArr3[i3];
                i2++;
            }
        }
        return i2;
    }

    private void p(int i2, int i3, byte b2, byte b3, byte b4) {
        if ((b2 & 1) == 0) {
            while (i2 < i3) {
                byte b5 = this.f25964e[i2];
                if (b5 != 0) {
                    if (b5 == 3) {
                        byte[] bArr = this.f25965f;
                        bArr[i2] = (byte) (bArr[i2] + 1);
                    } else {
                        byte[] bArr2 = this.f25965f;
                        bArr2[i2] = (byte) (bArr2[i2] + 2);
                    }
                }
                i2++;
            }
            return;
        }
        while (i2 < i3) {
            if (this.f25964e[i2] != 3) {
                byte[] bArr3 = this.f25965f;
                bArr3[i2] = (byte) (bArr3[i2] + 1);
            }
            i2++;
        }
    }

    private void q(int i2, int i3, byte b2, byte b3, byte b4) {
        byte b5;
        int i4 = i2;
        while (i4 < i3) {
            byte b6 = this.f25964e[i4];
            if (b6 == 17 || b6 == 18 || b6 == 15 || b6 == 16) {
                int e2 = e(i4, i3, new byte[]{15, 16, 17, 18});
                byte b7 = 3;
                if (i4 == i2) {
                    b5 = b3;
                } else {
                    b5 = this.f25964e[i4 - 1];
                    if (!(b5 == 0 || b5 == 3 || (b5 != 11 && b5 != 8))) {
                        b5 = 3;
                    }
                }
                if (e2 == i3) {
                    b7 = b4;
                } else {
                    byte b8 = this.f25964e[e2];
                    if (b8 == 0 || b8 == 3 || !(b8 == 11 || b8 == 8)) {
                        b7 = b8;
                    }
                }
                if (b5 != b7) {
                    b5 = v(b2);
                }
                u(i4, e2, b5);
                i4 = e2;
            }
            i4++;
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:20:0x0037  */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x0039 A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void r(int r11, int r12, byte r13, byte r14, byte r15) {
        /*
            r10 = this;
            r13 = 0
            r0 = 1
            r1 = r11
            r2 = r14
        L_0x0004:
            if (r1 >= r12) goto L_0x0014
            byte[] r3 = r10.f25964e
            byte r4 = r3[r1]
            r5 = 13
            if (r4 != r5) goto L_0x0011
            r3[r1] = r2
            goto L_0x0012
        L_0x0011:
            r2 = r4
        L_0x0012:
            int r1 = r1 + r0
            goto L_0x0004
        L_0x0014:
            r1 = r11
        L_0x0015:
            r2 = 4
            r3 = 3
            r4 = 11
            r5 = 8
            if (r1 >= r12) goto L_0x003b
            byte[] r6 = r10.f25964e
            byte r6 = r6[r1]
            if (r6 != r5) goto L_0x0039
            int r5 = r1 + -1
        L_0x0025:
            if (r5 < r11) goto L_0x0039
            byte[] r6 = r10.f25964e
            byte r7 = r6[r5]
            if (r7 == 0) goto L_0x0035
            if (r7 == r3) goto L_0x0035
            if (r7 != r2) goto L_0x0032
            goto L_0x0035
        L_0x0032:
            int r5 = r5 + -1
            goto L_0x0025
        L_0x0035:
            if (r7 != r2) goto L_0x0039
            r6[r1] = r4
        L_0x0039:
            int r1 = r1 + r0
            goto L_0x0015
        L_0x003b:
            r1 = r11
        L_0x003c:
            if (r1 >= r12) goto L_0x0048
            byte[] r6 = r10.f25964e
            byte r7 = r6[r1]
            if (r7 != r2) goto L_0x0046
            r6[r1] = r3
        L_0x0046:
            int r1 = r1 + r0
            goto L_0x003c
        L_0x0048:
            int r1 = r11 + 1
        L_0x004a:
            int r2 = r12 + -1
            r6 = 9
            r7 = 12
            if (r1 >= r2) goto L_0x0073
            byte[] r2 = r10.f25964e
            byte r8 = r2[r1]
            if (r8 == r6) goto L_0x005a
            if (r8 != r7) goto L_0x0071
        L_0x005a:
            int r6 = r1 + -1
            byte r6 = r2[r6]
            int r9 = r1 + 1
            byte r9 = r2[r9]
            if (r6 != r5) goto L_0x0069
            if (r9 != r5) goto L_0x0069
            r2[r1] = r5
            goto L_0x0071
        L_0x0069:
            if (r8 != r7) goto L_0x0071
            if (r6 != r4) goto L_0x0071
            if (r9 != r4) goto L_0x0071
            r2[r1] = r4
        L_0x0071:
            int r1 = r1 + r0
            goto L_0x004a
        L_0x0073:
            r1 = r11
        L_0x0074:
            r2 = 10
            if (r1 >= r12) goto L_0x00a2
            byte[] r4 = r10.f25964e
            byte r4 = r4[r1]
            if (r4 != r2) goto L_0x00a0
            byte[] r4 = new byte[r0]
            r4[r13] = r2
            int r2 = r10.e(r1, r12, r4)
            if (r1 != r11) goto L_0x008a
            r4 = r14
            goto L_0x0090
        L_0x008a:
            byte[] r4 = r10.f25964e
            int r8 = r1 + -1
            byte r4 = r4[r8]
        L_0x0090:
            if (r4 == r5) goto L_0x009a
            if (r2 != r12) goto L_0x0096
            r4 = r15
            goto L_0x009a
        L_0x0096:
            byte[] r4 = r10.f25964e
            byte r4 = r4[r2]
        L_0x009a:
            if (r4 != r5) goto L_0x009f
            r10.u(r1, r2, r5)
        L_0x009f:
            r1 = r2
        L_0x00a0:
            int r1 = r1 + r0
            goto L_0x0074
        L_0x00a2:
            r15 = r11
        L_0x00a3:
            if (r15 >= r12) goto L_0x00b5
            byte[] r1 = r10.f25964e
            byte r4 = r1[r15]
            if (r4 == r6) goto L_0x00af
            if (r4 == r2) goto L_0x00af
            if (r4 != r7) goto L_0x00b3
        L_0x00af:
            r4 = 18
            r1[r15] = r4
        L_0x00b3:
            int r15 = r15 + r0
            goto L_0x00a3
        L_0x00b5:
            r15 = r11
        L_0x00b6:
            if (r15 >= r12) goto L_0x00d7
            byte[] r1 = r10.f25964e
            byte r1 = r1[r15]
            if (r1 != r5) goto L_0x00d5
            int r1 = r15 + -1
        L_0x00c0:
            if (r1 < r11) goto L_0x00ce
            byte[] r2 = r10.f25964e
            byte r2 = r2[r1]
            if (r2 == 0) goto L_0x00cf
            if (r2 != r3) goto L_0x00cb
            goto L_0x00cf
        L_0x00cb:
            int r1 = r1 + -1
            goto L_0x00c0
        L_0x00ce:
            r2 = r14
        L_0x00cf:
            if (r2 != 0) goto L_0x00d5
            byte[] r1 = r10.f25964e
            r1[r15] = r13
        L_0x00d5:
            int r15 = r15 + r0
            goto L_0x00b6
        L_0x00d7:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.itextpdf.text.pdf.BidiOrder.r(int, int, byte, byte, byte):void");
    }

    /* JADX WARNING: Removed duplicated region for block: B:13:0x004f  */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x0054  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void s() {
        /*
            r11 = this;
            byte[] r0 = r11.f25960a
            int r1 = r0.length
            r11.f25963d = r1
            java.lang.Object r0 = r0.clone()
            byte[] r0 = (byte[]) r0
            r11.f25964e = r0
            byte r0 = r11.f25962c
            r1 = -1
            if (r0 != r1) goto L_0x0015
            r11.d()
        L_0x0015:
            int r0 = r11.f25963d
            byte[] r1 = new byte[r0]
            r11.f25965f = r1
            byte r1 = r11.f25962c
            r2 = 0
            r11.t(r2, r0, r1)
            r11.c()
            int r0 = r11.o()
            r11.f25963d = r0
            byte r0 = r11.f25962c
            r7 = 0
        L_0x002d:
            int r1 = r11.f25963d
            if (r7 >= r1) goto L_0x0070
            byte[] r1 = r11.f25965f
            byte r8 = r1[r7]
            int r0 = java.lang.Math.max(r0, r8)
            byte r0 = v(r0)
            int r1 = r7 + 1
            r9 = r1
        L_0x0040:
            int r1 = r11.f25963d
            if (r9 >= r1) goto L_0x004d
            byte[] r2 = r11.f25965f
            byte r2 = r2[r9]
            if (r2 != r8) goto L_0x004d
            int r9 = r9 + 1
            goto L_0x0040
        L_0x004d:
            if (r9 >= r1) goto L_0x0054
            byte[] r1 = r11.f25965f
            byte r1 = r1[r9]
            goto L_0x0056
        L_0x0054:
            byte r1 = r11.f25962c
        L_0x0056:
            int r1 = java.lang.Math.max(r1, r8)
            byte r10 = v(r1)
            r1 = r11
            r2 = r7
            r3 = r9
            r4 = r8
            r5 = r0
            r6 = r10
            r1.r(r2, r3, r4, r5, r6)
            r1.q(r2, r3, r4, r5, r6)
            r1.p(r2, r3, r4, r5, r6)
            r0 = r8
            r7 = r9
            goto L_0x002d
        L_0x0070:
            int r0 = r11.n(r1)
            r11.f25963d = r0
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.itextpdf.text.pdf.BidiOrder.s():void");
    }

    private void t(int i2, int i3, byte b2) {
        while (i2 < i3) {
            this.f25965f[i2] = b2;
            i2++;
        }
    }

    private void u(int i2, int i3, byte b2) {
        while (i2 < i3) {
            this.f25964e[i2] = b2;
            i2++;
        }
    }

    private static byte v(int i2) {
        return (i2 & 1) == 0 ? (byte) 0 : 3;
    }

    private static void w(int[] iArr, int i2) {
        int i3 = 0;
        int i4 = 0;
        while (i3 < iArr.length) {
            int i5 = iArr[i3];
            if (i5 > i4) {
                i3++;
                i4 = i5;
            } else {
                throw new IllegalArgumentException(MessageLocalization.b("bad.linebreak.1.at.index.2", String.valueOf(i5), String.valueOf(i3)));
            }
        }
        if (i4 != i2) {
            throw new IllegalArgumentException(MessageLocalization.a("last.linebreak.must.be.at.1", i2));
        }
    }

    private static void x(byte b2) {
        if (b2 != -1 && b2 != 0 && b2 != 1) {
            throw new IllegalArgumentException(MessageLocalization.a("illegal.paragraph.embedding.level.1", b2));
        }
    }

    private static void y(byte[] bArr) {
        int i2 = 0;
        if (bArr != null) {
            for (int i3 = 0; i3 < bArr.length; i3++) {
                byte b2 = bArr[i3];
                if (b2 < 0 || b2 > 18) {
                    throw new IllegalArgumentException(MessageLocalization.b("illegal.type.value.at.1.2", String.valueOf(i3), String.valueOf(bArr[i3])));
                }
            }
            while (i2 < bArr.length - 1) {
                if (bArr[i2] != 15) {
                    i2++;
                } else {
                    throw new IllegalArgumentException(MessageLocalization.a("b.type.before.end.of.paragraph.at.index.1", i2));
                }
            }
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.b("types.is.null", new Object[0]));
    }

    public byte g() {
        return this.f25962c;
    }

    public byte[] i() {
        return j(new int[]{this.f25963d});
    }

    public byte[] j(int[] iArr) {
        w(iArr, this.f25963d);
        byte[] bArr = (byte[]) this.f25965f.clone();
        int i2 = 0;
        for (int i3 = 0; i3 < bArr.length; i3++) {
            byte b2 = this.f25960a[i3];
            if (b2 == 15 || b2 == 16) {
                bArr[i3] = this.f25962c;
                int i4 = i3 - 1;
                while (i4 >= 0 && l(this.f25960a[i4])) {
                    bArr[i4] = this.f25962c;
                    i4--;
                }
            }
        }
        int i5 = 0;
        while (i2 < iArr.length) {
            int i6 = iArr[i2];
            int i7 = i6 - 1;
            while (i7 >= i5 && l(this.f25960a[i7])) {
                bArr[i7] = this.f25962c;
                i7--;
            }
            i2++;
            i5 = i6;
        }
        return bArr;
    }

    public int[] k(int[] iArr) {
        w(iArr, this.f25963d);
        return a(j(iArr), iArr);
    }

    public BidiOrder(byte[] bArr, byte b2) {
        y(bArr);
        x(b2);
        this.f25960a = (byte[]) bArr.clone();
        this.f25962c = b2;
        s();
    }

    public BidiOrder(char[] cArr, int i2, int i3, byte b2) {
        this.f25960a = new byte[i3];
        for (int i4 = 0; i4 < i3; i4++) {
            this.f25960a[i4] = B[cArr[i2 + i4]];
        }
        x(b2);
        this.f25962c = b2;
        s();
    }
}
